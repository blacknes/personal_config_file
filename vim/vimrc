" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"if has("autocmd")
"  filetype plugin indent on
"endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

map <F4> ms:call TitleDet()<cr>'s
function AddTitle()
    call append(0,"/*******************************************************************************")
    "call append(1,"#")
    call append(1," * Author :          Nill_Rhoads")
    "call append(3,"#")
    call append(2," * Email :           nillrhoads@gmail.com")
    "call append(5,"*")
    call append(3," * Last modified :   ".strftime("%Y-%m-%d %H:%M"))
    "call append(7,"#")
    call append(4," * Filename :        ".expand("%:t"))
    "call append(9,"#")
    call append(5," * Description :     ")
    ""call append(11,"#")
    call append(6," * *****************************************************************************/")
    echohl WarningMsg | echo "Successful in adding the copyright." | echohl None

endf

"更新最近修改时间和文件名
normal m'
"execute '/# *Last modified:/s@:.*$@\=strftime(":\t%Y-%m-%d %H:%M")@'
normal "
normal mk
"execute '/# *Filename:/s@:.*$@\=":\t\t".expand("%:t")@'
execute "noh"
normal 'k
"echohl WarningMsg | echo "\n" | echo "Successful in updating the copy right."| echohl None
"endfunction


"判断前10行代码里面，是否有Last modified这个单词，

"如果没有的话，代表没有添加过作者信息，需要新添加；

"如果有的话，那么只需要更新即可

function TitleDet()
    let n=1
    while n < 10
        let line = getline(n)
        if line =~'^\#\s*\S*Last\smodified:\S*.*$'
            call UpdateTitle()
            return
        endif
        let n = n + 1
    endwhile
    call AddTitle()
endfunction


"-----------code indented---------------"
: filetype indent on
set et
set ci
set shiftwidth=4
autocmd FileType make setlocal noexpandtab



